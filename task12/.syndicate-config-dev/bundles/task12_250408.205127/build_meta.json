{"lambda-basic-execution": {"policy_content": {"Statement": [{"Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "dynamodb:GetItem", "dynamodb:Query", "dynamodb:PutItem", "dynamodb:Batch*", "dynamodb:DeleteItem", "dynamodb:Scan", "cognito-idp:DescribeUserPool", "cognito-idp:GetUser", "cognito-idp:ListUsers", "cognito-idp:AdminCreateUser", "cognito-idp:AdminInitiateAuth", "cognito-idp:GetIdentityProviderByIdentifier", "cognito-idp:ListUserPools", "cognito-idp:ListUserPoolClients", "cognito-idp:AdminRespondToAuthChallenge", "cognito-idp:AdminConfirmSignUp", "cognito-idp:AdminSetUserPassword"], "Effect": "Allow", "Resource": "*"}], "Version": "2012-10-17"}, "resource_type": "iam_policy", "tags": {}}, "api_handler-role": {"predefined_policies": [], "principal_service": "lambda", "custom_policies": ["lambda-basic-execution"], "resource_type": "iam_role", "tags": {}}, "simple-booking-userpool": {"resource_type": "cognito_idp", "password_policy": {"minimum_length": 8, "require_uppercase": true, "require_symbols": true, "require_lowercase": true, "require_numbers": true}, "auto_verified_attributes": [], "sms_configuration": {}, "username_attributes": [], "custom_attributes": [], "client": {"client_name": "client-app", "generate_secret": false, "explicit_auth_flows": ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_CUSTOM_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]}, "tags": {}}, "${tables_table}": {"resource_type": "dynamodb_table", "hash_key_name": "id", "hash_key_type": "S", "read_capacity": 1, "write_capacity": 1, "global_indexes": [], "autoscaling": [], "tags": {}}, "${reservations_table}": {"resource_type": "dynamodb_table", "hash_key_name": "id", "hash_key_type": "S", "read_capacity": 1, "write_capacity": 1, "global_indexes": [], "autoscaling": [], "tags": {}}, "api-ui-hoster": {"resource_type": "s3_bucket", "acl": "private", "cors": [], "policy": {"Version": "2012-10-17", "Statement": [{"Sid": "WebSiteHostingGetObject", "Effect": "Allow", "Principal": "*", "Action": ["s3:GetObject"], "Resource": ["arn:aws:s3:::api-ui-hoster/*"], "Condition": {"IpAddress": {"aws:SourceIp": ["85.223.209.18/32"]}}}]}, "public_access_block": {"block_public_acls": true, "ignore_public_acls": true, "block_public_policy": true, "restrict_public_buckets": true}, "tags": {}, "website_hosting": {"enabled": true, "index_document": "index.html", "error_document": "error.html"}}, "task12_api": {"definition": {"openapi": "3.0.1", "info": {"title": "task12_api", "version": "2025-04-08T08:49:16Z"}, "servers": [{"url": "https://sqtcfxr1fk.execute-api.eu-west-1.amazonaws.com/{basePath}", "variables": {"basePath": {"default": "api"}}}], "paths": {"/reservations": {"get": {"summary": "Get all reservations", "description": "This endpoint returns all existing reservations in the system, including details such as table number, client name, contact information, reservation date, and time slot.", "responses": {"200": {"description": "A list of reservations got successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "security": [{"authorizer": []}], "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200"}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}, "post": {"summary": "Create a new reservation", "description": "This endpoint allows a user to create a new reservation by providing details such as table ID, client name, contact information, date, and time slot.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"tableId": {"type": "string", "description": "Identifier of the table being reserved"}, "clientName": {"type": "string", "description": "Full name of the person placing the reservation"}, "contactInfo": {"type": "string", "description": "Client\u0432\u0402\u2122s contact details, such as phone number or email address"}, "date": {"type": "string", "format": "date", "description": "Date on which the reservation is scheduled"}, "timeSlot": {"type": "string", "description": "Reserved time window (e.g., '18:00-20:00')"}}, "required": ["tableId", "clientName", "date", "timeSlot"]}}}}, "responses": {"200": {"description": "Reservation created successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "security": [{"authorizer": []}], "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200"}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}}, "/tables": {"get": {"summary": "Retrieve all tables", "description": "This endpoint returns a list of all tables registered in the system, along with their IDs and additional related information.", "responses": {"200": {"description": "A list of tables retrieved successfully", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "security": [{"authorizer": []}], "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}, "post": {"summary": "Create a new table", "description": "This endpoint allows the creation of a new table by specifying its details, such as table ID and capacity.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"tableId": {"type": "string", "description": "A unique ID assigned to the table"}, "capacity": {"type": "integer", "description": "Number of guests the table is designed to seat"}}, "required": ["tableId", "capacity"]}}}}, "responses": {"200": {"description": "Table created successfully", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "security": [{"authorizer": []}], "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}, "options": {"summary": "CORS preflight for /tables", "description": "Handles CORS preflight requests for the /tables endpoint.", "responses": {"200": {"description": "CORS preflight response", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "Access-Control-Allow-Methods": {"schema": {"type": "string"}}, "Access-Control-Allow-Headers": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "x-amazon-apigateway-integration": {"responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Methods": "'*'", "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'", "method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "requestTemplates": {"application/json": "{\"statusCode\": 200}"}, "passthroughBehavior": "when_no_match", "type": "mock"}}}, "/signin": {"post": {"summary": "Sign in a user", "description": "This endpoint authenticates a user by accepting their username and password, returning an authentication token upon success.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"username": {"type": "string", "description": "The username of the user"}, "password": {"type": "string", "description": "The password of the user"}}, "required": ["username", "password"]}}}}, "responses": {"200": {"description": "User signed in successfully", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}, "options": {"responses": {"200": {"description": "CORS preflight response", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "Access-Control-Allow-Methods": {"schema": {"type": "string"}}, "Access-Control-Allow-Headers": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "x-amazon-apigateway-integration": {"responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Methods": "'*'", "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'", "method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "requestTemplates": {"application/json": "{\"statusCode\": 200}"}, "passthroughBehavior": "when_no_match", "type": "mock"}}}, "/tables/{tableId}": {"get": {"summary": "Retrieve a specific table", "description": "This endpoint retrieves details of a specific table identified by its tableId.", "parameters": [{"name": "tableId", "in": "path", "required": true, "schema": {"type": "string"}, "description": "The unique identifier of the table"}], "responses": {"200": {"description": "Table details retrieved successfully", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "security": [{"authorizer": []}], "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200"}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}}, "/signup": {"post": {"summary": "Register a new user", "description": "This endpoint registers a new user by accepting a username and password, creating a new account in the system.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"username": {"type": "string", "description": "The desired username for the new user"}, "password": {"type": "string", "description": "The password for the new user"}}, "required": ["username", "password"]}}}}, "responses": {"200": {"description": "User registered successfully", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "x-amazon-apigateway-integration": {"httpMethod": "POST", "uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:423623856894:function:api_handler/invocations", "responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "passthroughBehavior": "when_no_match", "type": "aws_proxy"}}, "options": {"summary": "CORS preflight for /signup", "description": "Handles CORS preflight requests for the /signup endpoint.", "responses": {"200": {"description": "CORS preflight response", "headers": {"Access-Control-Allow-Origin": {"schema": {"type": "string"}}, "Access-Control-Allow-Methods": {"schema": {"type": "string"}}, "Access-Control-Allow-Headers": {"schema": {"type": "string"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Empty"}}}}}, "x-amazon-apigateway-integration": {"responses": {"default": {"statusCode": "200", "responseParameters": {"method.response.header.Access-Control-Allow-Methods": "'*'", "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'", "method.response.header.Access-Control-Allow-Origin": "'*'"}}}, "requestTemplates": {"application/json": "{\"statusCode\": 200}"}, "passthroughBehavior": "when_no_match", "type": "mock"}}}}, "components": {"schemas": {"Empty": {"title": "Empty Schema", "type": "object"}}, "securitySchemes": {"authorizer": {"type": "apiKey", "name": "Authorization", "in": "header", "x-amazon-apigateway-authtype": "cognito_user_pools", "x-amazon-apigateway-authorizer": {"x-syndicate-cognito-userpool-names": ["${booking_userpool}"], "type": "cognito_user_pools"}}}}, "x-syndicate-openapi-tags": {"run_id": "JAP-12", "run_type": "stm", "type": "user", "user_id": "a7d5d7ab"}}, "resource_type": "api_gateway_oas_v3", "deploy_stage": "api", "tags": {"run_id": "JAP-12", "run_type": "stm", "type": "user", "user_id": "a7d5d7ab"}}, "task12_api_ui": {"name": "task12_api_ui", "resource_type": "swagger_ui", "path_to_spec": "export/sqtcfxr1fk_oas_v3.json", "target_bucket": "api-ui-hoster", "deployment_package": "swagger_ui_task12_api_ui.zip"}, "api_handler": {"name": "api_handler", "lambda_path": "D:\\matvey 3\\epam-lambda-tasks\\task11Serverless-API-Cognito-Integration\\task12", "version": "1.0.0", "func_name": "com.task12.ApiHandler", "deployment_package": "task12-1.0.0.jar", "resource_type": "lambda", "runtime": "java11", "architectures": ["x86_64"], "iam_role_name": "api_handler-role", "memory": 1024, "timeout": 300, "subnet_ids": [], "security_group_ids": [], "dependencies": [{"resource_name": "${booking_userpool}", "resource_type": "cognito_idp"}, {"resource_name": "${reservations_table}", "resource_type": "dynamodb_table"}, {"resource_name": "${tables_table}", "resource_type": "dynamodb_table"}], "event_sources": [], "env_variables": {"CLIENT_ID": {"resource_name": "${booking_userpool}", "parameter": "client_id", "resource_type": "cognito_idp"}, "RESERVATIONS_TABLE": "${reservations_table}", "TABLES_TABLE": "${tables_table}", "COGNITO_ID": {"resource_name": "${booking_userpool}", "parameter": "id", "resource_type": "cognito_idp"}, "REGION": "${region}"}, "tags": {}, "publish_version": true, "alias": "${lambdas_alias_name}", "logs_expiration": "${logs_expiration}", "snap_start": "None"}}